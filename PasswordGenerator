import string
import random
import pyperclip

class Password:
    # Define character sets for password generation
    letters = string.ascii_letters
    numbers = string.digits
    special_characters = "!@#$%^&*()-_=+[]{}|;:'\",.<>/?"
    
    def __init__(self, length):
        # Constructor to initialize the Password instance with a specified length
        self.length = length

    def generate_password(self):
        # Generate a random password
        if self.length <= 11:
            # Ensure the password is at least 12 characters long
            return None
        else:
            characters = self.letters + self.numbers + self.special_characters
            password = ''.join(random.choice(characters) for _ in range(self.length))
            return password

    def generate_multiple_passwords(self, num_passwords):
        # Generate a list of passwords
        passwords = [self.generate_password() for _ in range(num_passwords)]
        return passwords

def main():
    try:
        # Prompt the user to input the number of passwords and the length for the passwords
        num_passwords = int(input("Please enter the number of passwords you would like to create: "))
        length = int(input("Enter the length for the passwords: "))
        
        # Create an instance of the Password class
        password_generator = Password(length)
        
        # Generate multiple passwords
        generated_passwords = password_generator.generate_multiple_passwords(num_passwords)

        # Flag to track if any password was successfully generated
        generated_successfully = False  

        # Iterate through generated passwords
        for i, password in enumerate(generated_passwords, start=1):
            if password:
                # Copy the password to the clipboard, print the generated password, and set the flag to True
                pyperclip.copy(password)
                print(f"Generated Password {i}: {password}")
                generated_successfully = True

        # If no passwords were successfully generated, print an error message
        if not generated_successfully:
            print("No passwords could be generated. Please enter a valid number for the password length.")

    except ValueError:
        # Handle a ValueError if the user enters an invalid number for the password length
        print("Please enter a valid number for the password length!")

if __name__ == "__main__":
    # Execute the main function when the script is run
    main()
